{"version":3,"file":"substrate_app.js","sourceRoot":"","sources":["../src/substrate_app.ts"],"names":[],"mappings":"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","sourcesContent":["/** ******************************************************************************\n *  (c) 2019 - 2022 ZondaX AG\n *  (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ******************************************************************************* */\nimport Transport from '@ledgerhq/hw-transport'\nimport {\n  CHUNK_SIZE,\n  errorCodeToString,\n  ERROR_CODE,\n  getVersion,\n  INS,\n  PAYLOAD_TYPE,\n  processErrorResponse,\n  ResponseAddress,\n  ResponseAllowlistHash,\n  ResponseAllowlistPubKey,\n  ResponseSign,\n  ResponseVersion,\n  SCHEME,\n} from './common'\n\nexport class SubstrateApp {\n  transport: Transport\n  cla: number\n  slip0044: number\n\n  constructor(transport: any, cla: number, slip0044: number) {\n    if (!transport) {\n      throw new Error('Transport has not been defined')\n    }\n    this.transport = transport\n    this.cla = cla\n    this.slip0044 = slip0044\n  }\n\n  static serializePath(slip0044: number, account: number, change: number, addressIndex: number) {\n    if (!Number.isInteger(account)) throw new Error('Input must be an integer')\n    if (!Number.isInteger(change)) throw new Error('Input must be an integer')\n    if (!Number.isInteger(addressIndex)) throw new Error('Input must be an integer')\n\n    const buf = Buffer.alloc(20)\n    buf.writeUInt32LE(0x8000002c, 0)\n    buf.writeUInt32LE(slip0044, 4)\n    buf.writeUInt32LE(account, 8)\n    buf.writeUInt32LE(change, 12)\n    buf.writeUInt32LE(addressIndex, 16)\n    return buf\n  }\n\n  static GetChunks(message: Buffer) {\n    const chunks = []\n    const buffer = Buffer.from(message)\n\n    for (let i = 0; i < buffer.length; i += CHUNK_SIZE) {\n      let end = i + CHUNK_SIZE\n      if (i > buffer.length) {\n        end = buffer.length\n      }\n      chunks.push(buffer.slice(i, end))\n    }\n\n    return chunks\n  }\n\n  static signGetChunks(slip0044: number, account: number, change: number, addressIndex: number, message: Buffer) {\n    const chunks = []\n    const bip44Path = SubstrateApp.serializePath(slip0044, account, change, addressIndex)\n    chunks.push(bip44Path)\n    chunks.push(...SubstrateApp.GetChunks(message))\n    return chunks\n  }\n\n  async getVersion(): Promise<ResponseVersion> {\n    try {\n      return await getVersion(this.transport, this.cla)\n    } catch (e) {\n      return processErrorResponse(e)\n    }\n  }\n\n  async appInfo() {\n    return this.transport.send(0xb0, 0x01, 0, 0).then(response => {\n      const errorCodeData = response.slice(-2)\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1]\n\n      let appName = ''\n      let appVersion = ''\n      let flagLen = 0\n      let flagsValue = 0\n\n      if (response[0] !== 1) {\n        // Ledger responds with format ID 1. There is no spec for any format != 1\n        return {\n          return_code: 0x9001,\n          error_message: 'response format ID not recognized',\n        }\n      } else {\n        const appNameLen = response[1]\n        appName = response.slice(2, 2 + appNameLen).toString('ascii')\n        let idx = 2 + appNameLen\n        const appVersionLen = response[idx]\n        idx += 1\n        appVersion = response.slice(idx, idx + appVersionLen).toString('ascii')\n        idx += appVersionLen\n        const appFlagsLen = response[idx]\n        idx += 1\n        flagLen = appFlagsLen\n        flagsValue = response[idx]\n      }\n\n      return {\n        return_code: returnCode,\n        error_message: errorCodeToString(returnCode),\n        // //\n        appName: appName ? appName : 'err',\n        appVersion: appVersion ? appVersion : 'err',\n        flagLen,\n        flagsValue,\n        // eslint-disable-next-line no-bitwise\n        flag_recovery: (flagsValue & 1) !== 0,\n        // eslint-disable-next-line no-bitwise\n        flag_signed_mcu_code: (flagsValue & 2) !== 0,\n        // eslint-disable-next-line no-bitwise\n        flag_onboarded: (flagsValue & 4) !== 0,\n        // eslint-disable-next-line no-bitwise\n        flag_pin_validated: (flagsValue & 128) !== 0,\n      }\n    }, processErrorResponse)\n  }\n\n  async getAddress(\n    account: number,\n    change: number,\n    addressIndex: number,\n    requireConfirmation = false,\n    scheme = SCHEME.ED25519,\n  ): Promise<ResponseAddress> {\n    const bip44Path = SubstrateApp.serializePath(this.slip0044, account, change, addressIndex)\n\n    let p1 = 0\n    if (requireConfirmation) p1 = 1\n\n    let p2 = 0\n    if (!isNaN(scheme)) p2 = scheme\n\n    return this.transport.send(this.cla, INS.GET_ADDR, p1, p2, bip44Path).then(response => {\n      const errorCodeData = response.slice(-2)\n      const errorCode = errorCodeData[0] * 256 + errorCodeData[1]\n\n      return {\n        pubKey: response.slice(0, 32).toString('hex'),\n        address: response.slice(32, response.length - 2).toString('ascii'),\n        return_code: errorCode,\n        error_message: errorCodeToString(errorCode),\n      }\n    }, processErrorResponse)\n  }\n\n  async signSendChunk(chunkIdx: number, chunkNum: number, chunk: any, scheme = SCHEME.ED25519) {\n    let payloadType = PAYLOAD_TYPE.ADD\n    if (chunkIdx === 1) {\n      payloadType = PAYLOAD_TYPE.INIT\n    }\n    if (chunkIdx === chunkNum) {\n      payloadType = PAYLOAD_TYPE.LAST\n    }\n\n    let p2 = 0\n    if (!isNaN(scheme)) p2 = scheme\n\n    return this.transport.send(this.cla, INS.SIGN, payloadType, p2, chunk, [ERROR_CODE.NoError, 0x6984, 0x6a80]).then(response => {\n      const errorCodeData = response.slice(-2)\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1]\n      let errorMessage = errorCodeToString(returnCode)\n      let signature = null\n\n      if (returnCode === 0x6a80 || returnCode === 0x6984) {\n        errorMessage = response.slice(0, response.length - 2).toString('ascii')\n      } else if (response.length > 2) {\n        signature = response.slice(0, response.length - 2)\n      }\n\n      return {\n        signature,\n        return_code: returnCode,\n        error_message: errorMessage,\n      }\n    }, processErrorResponse)\n  }\n\n  async sign(account: number, change: number, addressIndex: number, message: Buffer, scheme = SCHEME.ED25519): Promise<ResponseSign> {\n    const chunks = SubstrateApp.signGetChunks(this.slip0044, account, change, addressIndex, message)\n    return this.signSendChunk(1, chunks.length, chunks[0], scheme).then(async () => {\n      let result\n      for (let i = 1; i < chunks.length; i += 1) {\n        result = await this.signSendChunk(1 + i, chunks.length, chunks[i], scheme)\n        if (result.return_code !== ERROR_CODE.NoError) {\n          break\n        }\n      }\n\n      return {\n        return_code: result.return_code,\n        error_message: result.error_message,\n        signature: result.signature,\n      }\n    }, processErrorResponse)\n  }\n\n  /// Allow list related commands. They are NOT available on all apps\n\n  async getAllowlistPubKey(): Promise<ResponseAllowlistPubKey> {\n    return this.transport.send(this.cla, INS.ALLOWLIST_GET_PUBKEY, 0, 0).then(response => {\n      const errorCodeData = response.slice(-2)\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1]\n\n      console.log(response)\n\n      const pubkey = response.slice(0, 32)\n      // 32 bytes + 2 error code\n      if (response.length !== 34) {\n        return {\n          return_code: 0x6984,\n          error_message: errorCodeToString(0x6984),\n        }\n      }\n\n      return {\n        return_code: returnCode,\n        error_message: errorCodeToString(returnCode),\n        pubkey,\n      }\n    }, processErrorResponse)\n  }\n\n  async setAllowlistPubKey(pk: Buffer) {\n    return this.transport.send(this.cla, INS.ALLOWLIST_SET_PUBKEY, 0, 0, pk).then(response => {\n      const errorCodeData = response.slice(-2)\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1]\n\n      return {\n        return_code: returnCode,\n        error_message: errorCodeToString(returnCode),\n      }\n    }, processErrorResponse)\n  }\n\n  async getAllowlistHash(): Promise<ResponseAllowlistHash> {\n    return this.transport.send(this.cla, INS.ALLOWLIST_GET_HASH, 0, 0).then(response => {\n      const errorCodeData = response.slice(-2)\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1]\n\n      console.log(response)\n\n      const hash = response.slice(0, 32)\n      // 32 bytes + 2 error code\n      if (response.length !== 34) {\n        return {\n          return_code: 0x6984,\n          error_message: errorCodeToString(0x6984),\n        }\n      }\n\n      return {\n        return_code: returnCode,\n        error_message: errorCodeToString(returnCode),\n        hash,\n      }\n    }, processErrorResponse)\n  }\n\n  async uploadSendChunk(chunkIdx: number, chunkNum: number, chunk: any) {\n    let payloadType = PAYLOAD_TYPE.ADD\n    if (chunkIdx === 1) {\n      payloadType = PAYLOAD_TYPE.INIT\n    }\n    if (chunkIdx === chunkNum) {\n      payloadType = PAYLOAD_TYPE.LAST\n    }\n\n    return this.transport.send(this.cla, INS.ALLOWLIST_UPLOAD, payloadType, 0, chunk, [ERROR_CODE.NoError]).then(response => {\n      const errorCodeData = response.slice(-2)\n      const returnCode = errorCodeData[0] * 256 + errorCodeData[1]\n      const errorMessage = errorCodeToString(returnCode)\n\n      return {\n        return_code: returnCode,\n        error_message: errorMessage,\n      }\n    }, processErrorResponse)\n  }\n\n  async uploadAllowlist(message: any) {\n    const chunks: any[] = []\n    chunks.push(Buffer.from([0]))\n    chunks.push(...SubstrateApp.GetChunks(message))\n\n    return this.uploadSendChunk(1, chunks.length, chunks[0]).then(async result => {\n      if (result.return_code !== ERROR_CODE.NoError) {\n        return {\n          return_code: result.return_code,\n          error_message: result.error_message,\n        }\n      }\n\n      for (let i = 1; i < chunks.length; i += 1) {\n        // eslint-disable-next-line no-await-in-loop,no-param-reassign\n        result = await this.uploadSendChunk(1 + i, chunks.length, chunks[i])\n        if (result.return_code !== ERROR_CODE.NoError) {\n          break\n        }\n      }\n\n      return {\n        return_code: result.return_code,\n        error_message: result.error_message,\n      }\n    }, processErrorResponse)\n  }\n}\n"]}