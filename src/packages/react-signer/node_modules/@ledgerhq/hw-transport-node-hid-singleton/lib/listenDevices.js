"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listenDevices = exports.setUsbDebounce = void 0;
const usb_1 = require("usb");
const devices_1 = require("@ledgerhq/devices");
const logs_1 = require("@ledgerhq/logs");
const deviceToLog = ({ deviceDescriptor: { idProduct }, busNumber, deviceAddress, }) => `productId=${idProduct} busNumber=${busNumber} deviceAddress=${deviceAddress}`;
let usbDebounce = 1000;
const setUsbDebounce = (n) => {
    usbDebounce = n;
};
exports.setUsbDebounce = setUsbDebounce;
const mapRawDevice = ({ busNumber: locationId, deviceAddress, deviceDescriptor: { idVendor: vendorId, idProduct: productId, iSerialNumber: serialNumber, }, }) => ({
    locationId,
    vendorId,
    productId,
    deviceName: "",
    manufacturer: "",
    serialNumber,
    deviceAddress,
});
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const listenDevices = (onAdd, onRemove) => {
    let timeout;
    const add = (device) => {
        if (device.deviceDescriptor.idVendor !== devices_1.ledgerUSBVendorId)
            return;
        (0, logs_1.log)("usb-detection", "add: " + deviceToLog(device));
        if (!timeout) {
            // a time is needed for the device to actually be connectable over HID..
            // we also take this time to not emit the device yet and potentially cancel it if a remove happens.
            timeout = setTimeout(() => {
                onAdd(mapRawDevice(device));
                timeout = null;
            }, usbDebounce);
        }
    };
    const remove = (device) => {
        if (device.deviceDescriptor.idVendor !== devices_1.ledgerUSBVendorId)
            return;
        (0, logs_1.log)("usb-detection", "remove: " + deviceToLog(device));
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
        else {
            onRemove(mapRawDevice(device));
        }
    };
    usb_1.usb.on("attach", add);
    usb_1.usb.on("detach", remove);
    return () => {
        if (timeout)
            clearTimeout(timeout);
        usb_1.usb.unrefHotplugEvents();
    };
};
exports.listenDevices = listenDevices;
process.on("exit", () => {
    usb_1.usb.unrefHotplugEvents();
});
//# sourceMappingURL=listenDevices.js.map