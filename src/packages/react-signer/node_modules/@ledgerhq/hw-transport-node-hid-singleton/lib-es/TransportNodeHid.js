var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import HID from "node-hid";
import TransportNodeHidNoEvents, { getDevices, } from "@ledgerhq/hw-transport-node-hid-noevents";
import { log } from "@ledgerhq/logs";
import { identifyUSBProductId } from "@ledgerhq/devices";
import { CantOpenDevice } from "@ledgerhq/errors";
import { listenDevices } from "./listenDevices";
let transportInstance;
const DISCONNECT_TIMEOUT = 5000;
let disconnectTimeout;
const clearDisconnectTimeout = () => {
    if (disconnectTimeout) {
        clearTimeout(disconnectTimeout);
    }
};
const setDisconnectTimeout = () => {
    clearDisconnectTimeout();
    disconnectTimeout = setTimeout(() => TransportNodeHidSingleton.autoDisconnect(), DISCONNECT_TIMEOUT);
};
/**
 * node-hid Transport implementation
 * @example
 * import TransportNodeHid from "@ledgerhq/hw-transport-node-hid-singleton";
 * ...
 * TransportNodeHid.create().then(transport => ...)
 */
export default class TransportNodeHidSingleton extends TransportNodeHidNoEvents {
    constructor() {
        super(...arguments);
        this.preventAutoDisconnect = false;
    }
    /**
     * convenience wrapper for auto-disconnect logic
     */
    static autoDisconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (transportInstance && !transportInstance.preventAutoDisconnect) {
                log("hid-verbose", "triggering auto disconnect");
                TransportNodeHidSingleton.disconnect();
            }
            else if (transportInstance) {
                // If we have disabled the auto-disconnect, try again in DISCONNECT_TIMEOUT
                clearDisconnectTimeout();
                setDisconnectTimeout();
            }
        });
    }
    /**
     * globally disconnect the transport singleton
     */
    static disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (transportInstance) {
                transportInstance.device.close();
                transportInstance.emit("disconnect");
                transportInstance = null;
            }
            clearDisconnectTimeout();
        });
    }
    /**
     * if path="" is not provided, the library will take the first device
     */
    static open() {
        clearDisconnectTimeout();
        return Promise.resolve().then(() => {
            if (transportInstance) {
                log("hid-verbose", "reusing opened transport instance");
                return transportInstance;
            }
            const device = getDevices()[0];
            if (!device)
                throw new CantOpenDevice("no device found");
            log("hid-verbose", "new HID transport");
            transportInstance = new TransportNodeHidSingleton(new HID.HID(device.path));
            const unlisten = listenDevices(() => { }, () => {
                // assume any ledger disconnection concerns current transport
                if (transportInstance) {
                    transportInstance.emit("disconnect");
                }
            });
            const onDisconnect = () => {
                if (!transportInstance)
                    return;
                log("hid-verbose", "transport instance was disconnected");
                transportInstance.off("disconnect", onDisconnect);
                transportInstance = null;
                unlisten();
            };
            transportInstance.on("disconnect", onDisconnect);
            return transportInstance;
        });
    }
    setAllowAutoDisconnect(allow) {
        this.preventAutoDisconnect = !allow;
    }
    /**
     * Exchange with the device using APDU protocol.
     * @param apdu
     * @returns a promise of apdu response
     */
    exchange(apdu) {
        const _super = Object.create(null, {
            exchange: { get: () => super.exchange }
        });
        return __awaiter(this, void 0, void 0, function* () {
            clearDisconnectTimeout();
            const result = yield _super.exchange.call(this, apdu);
            setDisconnectTimeout();
            return result;
        });
    }
    close() {
        // intentionally, a close will not effectively close the hid connection but
        // will allow an auto-disconnection after some inactivity
        this.preventAutoDisconnect = false;
        return Promise.resolve();
    }
}
/**
 *
 */
TransportNodeHidSingleton.isSupported = TransportNodeHidNoEvents.isSupported;
/**
 *
 */
TransportNodeHidSingleton.list = TransportNodeHidNoEvents.list;
/**
 */
TransportNodeHidSingleton.listen = (observer) => {
    let unsubscribed;
    Promise.resolve(getDevices()).then((devices) => {
        // this needs to run asynchronously so the subscription is defined during this phase
        for (const device of devices) {
            if (!unsubscribed) {
                const deviceModel = identifyUSBProductId(device.productId);
                observer.next({
                    type: "add",
                    descriptor: "",
                    device: {
                        name: device.deviceName,
                    },
                    deviceModel,
                });
            }
        }
    });
    const onAdd = (device) => {
        const deviceModel = identifyUSBProductId(device.productId);
        observer.next({
            type: "add",
            descriptor: "",
            deviceModel,
            device: {
                name: device.deviceName,
            },
        });
    };
    const onRemove = (device) => {
        const deviceModel = identifyUSBProductId(device.productId);
        observer.next({
            type: "remove",
            descriptor: "",
            deviceModel,
            device: {
                name: device.deviceName,
            },
        });
    };
    const stop = listenDevices(onAdd, onRemove);
    function unsubscribe() {
        stop();
        unsubscribed = true;
    }
    return {
        unsubscribe,
    };
};
//# sourceMappingURL=TransportNodeHid.js.map