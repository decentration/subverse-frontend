/// <reference types="node" />
import TransportNodeHidNoEvents from "@ledgerhq/hw-transport-node-hid-noevents";
import type { Observer, DescriptorEvent, Subscription } from "@ledgerhq/hw-transport";
export type ListenDescriptorEvent = DescriptorEvent<any>;
/**
 * node-hid Transport implementation
 * @example
 * import TransportNodeHid from "@ledgerhq/hw-transport-node-hid-singleton";
 * ...
 * TransportNodeHid.create().then(transport => ...)
 */
export default class TransportNodeHidSingleton extends TransportNodeHidNoEvents {
    preventAutoDisconnect: boolean;
    /**
     *
     */
    static isSupported: () => Promise<boolean>;
    /**
     *
     */
    static list: () => Promise<any>;
    /**
     */
    static listen: (observer: Observer<ListenDescriptorEvent>) => Subscription;
    /**
     * convenience wrapper for auto-disconnect logic
     */
    static autoDisconnect(): Promise<void>;
    /**
     * globally disconnect the transport singleton
     */
    static disconnect(): Promise<void>;
    /**
     * if path="" is not provided, the library will take the first device
     */
    static open(): Promise<TransportNodeHidSingleton>;
    setAllowAutoDisconnect(allow: boolean): void;
    /**
     * Exchange with the device using APDU protocol.
     * @param apdu
     * @returns a promise of apdu response
     */
    exchange(apdu: Buffer): Promise<Buffer>;
    close(): Promise<void>;
}
//# sourceMappingURL=TransportNodeHid.d.ts.map