// Copyright 2017-2023 @polkadot/hw-ledger authors & contributors
// SPDX-License-Identifier: Apache-2.0

import { newSubstrateApp } from '@zondax/ledger-substrate';
import { transports } from '@polkadot/hw-ledger-transports';
import { hexAddPrefix, u8aToBuffer } from '@polkadot/util';
import { LEDGER_DEFAULT_ACCOUNT, LEDGER_DEFAULT_CHANGE, LEDGER_DEFAULT_INDEX, LEDGER_SUCCESS_CODE } from "./constants.js";
import { ledgerApps } from "./defaults.js";
export { packageInfo } from "./packageInfo.js";
/** @internal Wraps a SubstrateApp call, checking the result for any errors which result in a rejection */
async function wrapError(promise) {
  const result = await promise;
  if (result.return_code !== LEDGER_SUCCESS_CODE) {
    throw new Error(result.error_message);
  }
  return result;
}

// A very basic wrapper for a ledger app -
//  - it connects automatically, creating an app as required
//  - Promises return errors (instead of wrapper errors)
export class Ledger {
  #app = null;
  #chain;
  #transport;
  constructor(transport, chain) {
    // u2f is deprecated
    if (!['hid', 'webusb'].includes(transport)) {
      throw new Error(`Unsupported transport ${transport}`);
    } else if (!Object.keys(ledgerApps).includes(chain)) {
      throw new Error(`Unsupported chain ${chain}`);
    }
    this.#chain = chain;
    this.#transport = transport;
  }
  async getAddress(confirm = false, accountOffset = 0, addressOffset = 0, {
    account = LEDGER_DEFAULT_ACCOUNT,
    addressIndex = LEDGER_DEFAULT_INDEX,
    change = LEDGER_DEFAULT_CHANGE
  } = {}) {
    return this.#withApp(async app => {
      const {
        address,
        pubKey
      } = await wrapError(app.getAddress(account + accountOffset, change, addressIndex + addressOffset, confirm));
      return {
        address,
        publicKey: hexAddPrefix(pubKey)
      };
    });
  }
  async getVersion() {
    return this.#withApp(async app => {
      const {
        device_locked: isLocked,
        major,
        minor,
        patch,
        test_mode: isTestMode
      } = await wrapError(app.getVersion());
      return {
        isLocked,
        isTestMode,
        version: [major, minor, patch]
      };
    });
  }
  async sign(message, accountOffset = 0, addressOffset = 0, {
    account = LEDGER_DEFAULT_ACCOUNT,
    addressIndex = LEDGER_DEFAULT_INDEX,
    change = LEDGER_DEFAULT_CHANGE
  } = {}) {
    return this.#withApp(async app => {
      const buffer = u8aToBuffer(message);
      const {
        signature
      } = await wrapError(app.sign(account + accountOffset, change, addressIndex + addressOffset, buffer));
      return {
        signature: hexAddPrefix(signature.toString('hex'))
      };
    });
  }
  #getApp = async () => {
    if (!this.#app) {
      const def = transports.find(({
        type
      }) => type === this.#transport);
      if (!def) {
        throw new Error(`Unable to find a transport for ${this.#transport}`);
      }
      const transport = await def.create();
      this.#app = newSubstrateApp(transport, ledgerApps[this.#chain]);
    }
    return this.#app;
  };
  #withApp = async fn => {
    try {
      const app = await this.#getApp();
      return await fn(app);
    } catch (error) {
      this.#app = null;
      throw error;
    }
  };
}